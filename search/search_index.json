{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"memegen.link An API to programatically generate memes based solely on requested URLs. Generating Images The API is stateless so URLs contain all the information necessary to generate meme images. For example, https://api.memegen.link/images/buzz/memes/memes_everywhere.png produces: Special Characters In URLs, spaces can be inserted using underscores or dashes: underscore ( _ ) \u2192 space ( ) dash ( - ) \u2192 space ( ) 2 underscores ( __ ) \u2192 underscore ( _ ) 2 dashes ( -- ) \u2192 dash ( - ) Reserved URL characters can be include using escape patterns: tilde + Q ( ~q ) \u2192 question mark ( ? ) tilde + P ( ~p ) \u2192 percentage ( % ) tilde + H ( ~h ) \u2192 hashtag/pound ( # ) tilde + S ( ~s ) \u2192 slash ( / ) tilde + B ( ~b ) \u2192 backslash ( \\ ) 2 single quotes ( '' ) \u2192 double quote ( \" ) For example, https://api.memegen.link/images/doge/~hspecial_characters~q/underscore__-dash--.png produces: Alternate Styles Some memes come in multiple forms, which can be selected via ?style=<style> . For example, these are two styles provided by the https://api.memegen.link/templates/ds template: /images/ds.png /images/ds.png?style=maga Custom Backgrounds You can also use your own image URL as the background. For example, https://api.memegen.link/images/custom/_/my_background.png?background=http://www.gstatic.com/webp/gallery/1.png produces: Image Sizing Images can be scaled to a specific width via ?width=<int> or a specific height via ?height=<int> . If both parameters are provided ( ?width=<int>&height=<int> ), the image will be padded to the exact dimensions. For example, https://api.memegen.link/images/both/width_or_height/why_not_both~q.png?height=350&width=600 produces: Clients can also request .jpg instead of .png for smaller files. Live Previews If your client is going to show live previews of a custom meme, please use the /images/preview.jpg endpoint, which accepts URL-encoded parameters and returns smaller images to minimize bandwidth. Both template keys and URLs are supported: https://api.memegen.link/images/preview.jpg?template=fry&lines[]=first&lines[]=second https://api.memegen.link/images/preview.jpg?template=https://api.memegen.link/images/fry.png&lines[]=first&lines[]=second API Documentation The full interactive documentation is available here: https://api.memegen.link/docs/ Here are some sample clients to explore: Platforms Link Source Slack --- Python: nicolewhite/slack-meme Slack --- Go: CptSpaceToaster/slackbot Slack http://www.memetizer.com --- Hain --- JavaScript: Metrakit/hain-plugin-meme Web --- Clojure: jasich/mighty-fine-memes Web, Slack https://memecomplete.com --- Discord --- JavaScript: https://github.com/parshsee/discordbot Additional clients can be found by searching for code examples on GitHub .","title":"memegen.link"},{"location":"#memegenlink","text":"An API to programatically generate memes based solely on requested URLs.","title":"memegen.link"},{"location":"#generating-images","text":"The API is stateless so URLs contain all the information necessary to generate meme images. For example, https://api.memegen.link/images/buzz/memes/memes_everywhere.png produces:","title":"Generating Images"},{"location":"#special-characters","text":"In URLs, spaces can be inserted using underscores or dashes: underscore ( _ ) \u2192 space ( ) dash ( - ) \u2192 space ( ) 2 underscores ( __ ) \u2192 underscore ( _ ) 2 dashes ( -- ) \u2192 dash ( - ) Reserved URL characters can be include using escape patterns: tilde + Q ( ~q ) \u2192 question mark ( ? ) tilde + P ( ~p ) \u2192 percentage ( % ) tilde + H ( ~h ) \u2192 hashtag/pound ( # ) tilde + S ( ~s ) \u2192 slash ( / ) tilde + B ( ~b ) \u2192 backslash ( \\ ) 2 single quotes ( '' ) \u2192 double quote ( \" ) For example, https://api.memegen.link/images/doge/~hspecial_characters~q/underscore__-dash--.png produces:","title":"Special Characters"},{"location":"#alternate-styles","text":"Some memes come in multiple forms, which can be selected via ?style=<style> . For example, these are two styles provided by the https://api.memegen.link/templates/ds template: /images/ds.png /images/ds.png?style=maga","title":"Alternate Styles"},{"location":"#custom-backgrounds","text":"You can also use your own image URL as the background. For example, https://api.memegen.link/images/custom/_/my_background.png?background=http://www.gstatic.com/webp/gallery/1.png produces:","title":"Custom Backgrounds"},{"location":"#image-sizing","text":"Images can be scaled to a specific width via ?width=<int> or a specific height via ?height=<int> . If both parameters are provided ( ?width=<int>&height=<int> ), the image will be padded to the exact dimensions. For example, https://api.memegen.link/images/both/width_or_height/why_not_both~q.png?height=350&width=600 produces: Clients can also request .jpg instead of .png for smaller files.","title":"Image Sizing"},{"location":"#live-previews","text":"If your client is going to show live previews of a custom meme, please use the /images/preview.jpg endpoint, which accepts URL-encoded parameters and returns smaller images to minimize bandwidth. Both template keys and URLs are supported: https://api.memegen.link/images/preview.jpg?template=fry&lines[]=first&lines[]=second https://api.memegen.link/images/preview.jpg?template=https://api.memegen.link/images/fry.png&lines[]=first&lines[]=second","title":"Live Previews"},{"location":"#api-documentation","text":"The full interactive documentation is available here: https://api.memegen.link/docs/ Here are some sample clients to explore: Platforms Link Source Slack --- Python: nicolewhite/slack-meme Slack --- Go: CptSpaceToaster/slackbot Slack http://www.memetizer.com --- Hain --- JavaScript: Metrakit/hain-plugin-meme Web --- Clojure: jasich/mighty-fine-memes Web, Slack https://memecomplete.com --- Discord --- JavaScript: https://github.com/parshsee/discordbot Additional clients can be found by searching for code examples on GitHub .","title":"API Documentation"}]}